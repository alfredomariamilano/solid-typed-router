// IMPORTANT: This file is auto-generated by Solid Typed Routes. Do not edit it directly.

/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

import { A, type NavigateOptions, type RouteDefinition, useNavigate } from '@solidjs/router'
// import { A, useNavigate } from '@solidjs/router'
import { type ComponentProps, type JSX, lazy, splitProps } from 'solid-js'

export const dynamicParamsPrefix = '$$$dynamicParamsPrefix$$$'
export const dynamicCatchAllParamsPrefix = '$$$dynamicCatchAllParamsPrefix$$$'

export const dotReplacement = '$$$dotReplacement$$$'
export const dashReplacement = '$$$dashReplacement$$$'
export const plusReplacement = '$$$plusReplacement$$$'

export const routes = $$$routes$$$ as const satisfies RouteDefinition[]

export type StaticTypedRoutes = $$$StaticTypedRoutes$$$

export type DynamicTypedRoutes = $$$DynamicTypedRoutes$$$

export type DynamicTypedRoutesParams = $$$DynamicTypedRoutesParams$$$

export type TypedRoutes = StaticTypedRoutes | DynamicTypedRoutes

// export type TypedLinkProps = Omit<AnchorProps> & {}

// export const TypedLink = (props) => {
//   return A(props)
// }

type DynamicTypedRouteParams<T extends DynamicTypedRoutes> = {
  params: {
    [K in DynamicTypedRoutesParams[T][number]]: string | number
  }
}

export type TypedNavigateOptions<T extends TypedRoutes> = T extends StaticTypedRoutes
  ? Partial<NavigateOptions> | undefined
  : Partial<NavigateOptions> & DynamicTypedRouteParams<T>

interface TypedNavigator {
  <T extends TypedRoutes>(to: T, options: TypedNavigateOptions<T>): void
  (delta: number): void
}

export const getTypedRoute = <T extends TypedRoutes>(
  href: T,
  params: T extends DynamicTypedRoutes ? Pick<DynamicTypedRouteParams<T>, 'params'> : never,
) => {
  let parsedLink = href

  if (params) {
    Object.keys(params).forEach(key => {
      const dynamicParamKey: keyof DynamicTypedRouteParams<T>['params'] = key
        .split(dynamicCatchAllParamsPrefix)
        .join('*')
        .split(dynamicParamsPrefix)
        .join(':')
        .split(dotReplacement)
        .join('.')
        .split(dashReplacement)
        .join('-')
        .split(plusReplacement)
        .join('+')

      parsedLink = parsedLink.split(dynamicParamKey).join(params[key])
    })
  }

  return parsedLink
}

export const useTypedNavigate = () => {
  const navigate = useNavigate()

  const typedNavigate: TypedNavigator = (...args) => {
    const newArgs = args

    if (typeof args[0] === 'string') {
      args[0] = getTypedRoute(args[0], args[1]?.params)
    }

    return navigate(...newArgs)
  }

  return typedNavigate
}

export type TypedLinkProps<T extends TypedRoutes> = Omit<ComponentProps<typeof A>, 'href'> & {
  search?: `?${string}`
  href: T
} & (T extends DynamicTypedRoutes ? DynamicTypedRouteParams<T> : { params?: never })

export function TypedLink<T extends TypedRoutes>(props: TypedLinkProps<T>): JSX.Element {
  const [link, rest] = splitProps(props, ['href', 'params', 'search'])

  const href = () => {
    return getTypedRoute(link.href, link.params)
  }

  return A({ ...rest, href: `${href()}${link.search || ''}` })
}

declare module '@solidjs/router' {
  interface Navigator {
    <T extends TypedRoutes>(to: T, options: TypedNavigateOptions<T>): void
    (delta: number): void
  }
}
